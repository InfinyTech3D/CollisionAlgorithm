name: CI

on:
  push:

jobs:
  build-and-test:
    name: Run on ${{ matrix.os }} with SOFA ${{ matrix.sofa_branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]
        sofa_branch: [master]

    steps:
      - name: Setup SOFA and environment
        id: sofa
        uses: sofa-framework/sofa-setup-action@v5
        with:
          sofa_root: ${{ github.workspace }}/sofa
          sofa_version: ${{ matrix.sofa_branch }}
          sofa_scope: 'standard'
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          path: ${{ env.WORKSPACE_SRC_PATH }}        

      - name: Build and install
        id: build-install
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} \
              && cd /d $WORKSPACE_BUILD_PATH \
              && cmake \
                  -GNinja \
                  -DCMAKE_PREFIX_PATH="$SOFA_ROOT/lib/cmake" \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
                  ../src \
              && ninja install"
          else
            cd "$WORKSPACE_BUILD_PATH"
            ccache -z
            cmake \
              -GNinja \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PREFIX_PATH=$SOFA_ROOT/lib/cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
              ../src
            ninja install
            echo ${CCACHE_BASEDIR}
            ccache -s
          fi
          
      - name: Sanitize artifact name
        id: sanitize
        # This step removes special characters from the artifact name to ensure compatibility with upload-artifact
        # Characters removed: " : < > | * ? \r \n \ /
        # Spaces are replaced with underscores
        # This sanitization prevents errors in artifact creation and retrieval
        shell: pwsh
        run: |
          $originalName = "CollisionAlgorithm_${{ steps.sofa.outputs.run_branch }}_for-SOFA-${{ steps.sofa.outputs.sofa_version }}_${{ runner.os }}"
          $artifact_name = $originalName -replace '[":;<>|*?\r\n\\/]', '' -replace ' ', '_'
          echo "artifact_name=$artifact_name" >> $env:GITHUB_OUTPUT
          
      - name: Create artifact
        id: create-artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ steps.sanitize.outputs.artifact_name }}
          path: ${{ env.WORKSPACE_INSTALL_PATH }}

      - name: Install artifact
        id: install-artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ steps.sanitize.outputs.artifact_name }}
          path: ${{ env.WORKSPACE_ARTIFACT_PATH }}
      
      - name: Set env vars for tests
        shell: bash
        run: |
          # Set env vars for tests
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "$WORKSPACE_ARTIFACT_PATH/lib" >> $GITHUB_PATH
            echo "$WORKSPACE_ARTIFACT_PATH/bin" >> $GITHUB_PATH
            echo "$SOFA_ROOT/plugins/SofaPython3/bin" >> $GITHUB_PATH
            echo "SOFA_PLUGIN_PATH=$WORKSPACE_ARTIFACT_PATH/bin" | tee -a $GITHUB_ENV
          else
            echo "SOFA_PLUGIN_PATH=$WORKSPACE_ARTIFACT_PATH/lib" | tee -a $GITHUB_ENV
          fi

          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "DYLD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$SOFA_ROOT/plugins/SofaPython3/lib:$DYLD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          fi

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "LD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$SOFA_ROOT/plugins/SofaPython3/lib:$LD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          fi

  deploy:
    name: Deploy artifacts
    if: always() && startsWith(github.repository, 'InfinyTech3D') && (startsWith(github.ref, 'refs/heads/')) # we are on a branch (not a PR)
    needs: [build-and-test]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          path: artifacts

      - name: Zip artifacts
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/artifacts
          for artifact in *; do
            zip $artifact.zip -r $artifact/*
          done
          PROJECT_NAME="${GITHUB_REPOSITORY#*/}"
          echo "PROJECT_NAME=$PROJECT_NAME" | tee -a $GITHUB_ENV

          RELEASE_NAME="${{ github.ref_name }}"
          RELEASE_TAGNAME="release-${{ github.ref_name }}"
          RELEASE_DATE=$(date +'%Y-%m-%d')
          echo "RELEASE_NAME=$RELEASE_NAME" | tee -a $GITHUB_ENV
          echo "RELEASE_TAGNAME=$RELEASE_TAGNAME" | tee -a $GITHUB_ENV
          echo "RELEASE_DATE=$RELEASE_DATE" | tee -a $GITHUB_ENV

      - name: Delete old release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
            tag-name: ${{ env.RELEASE_TAGNAME}}
            delete_release: true
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sleep for 60 seconds
        run: sleep 60
        shell: bash

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.RELEASE_TAGNAME }}
          fail_on_unmatched_files: true
          files: |
            artifacts/${{ env.PROJECT_NAME }}_*_Linux.zip
            artifacts/${{ env.PROJECT_NAME }}_*_Windows.zip
            artifacts/${{ env.PROJECT_NAME }}_*_macOS.zip

